========
OPTIMASS
========

OPTIMASS is a package to implement the minimization of 
kinematic mass functions with constraints for general event topologies, 
using augmented Lagrange method, practically utilizing CERN MINUIT2 as
the main engine of unconstrained minimization process.

It is written in part in Python for the interpretor of user's model, and 
for the generator of the model dictionary source codes (in C++), which 
will be linked to the main ALM routines written in C++.


Homepage: https://github.com/hepkosmos/OptiMass.git
References: http://arXiv.org/abs/1508.00589

----------------
# Requirements #
----------------

1) C++ compiler (g++ >=4.4.7 or clang++ >=3.1)
2) Python (python >= 2.6)
3) ROOT installation with MINUIT2 activated (https://root.cern.ch) 
4) Autotools and Libtools


------------------------
# Downloading OPTIMASS #
------------------------

> git clone https://github.com/hepkosmos/OptiMass.git


---------------------------------------------
# How to Build the OPTIMASS's Core Library? #
---------------------------------------------

: at 'alm_base' directory,
$> ./configure
$> make
$> make install
: check if 'lib' directory now has 'libOptiMass.so/dylib', and 'include/alm_base' has proper headers

: export the library path to your shell environment variable, for example
$> export LD_LIBRARY_PATH=(Absolute-PATH-of-the-libOptiMass.so):$LD_LIBRARY_PATH


-------------------------------------
# How to Create a Model Card File ? #
-------------------------------------

: Prepare your own model file in xml format (see the examples in 'model/example_models/<>.xml' )
: at top optimass directory
$> cp <your model>.xml ./model/model_card.xml
$> ./build_model_dictionary
: check followed summary messages for generated model dictionary src files (model/dict_src/<your model>.cpp/.h) and corresponding skeleton main event interface file - (model/main_src/main_<your model>.cpp)


--------------------------------------------------------
# How to Compile and Run a Main-Event-Interface Code ? #
--------------------------------------------------------

: Prepared with 
1. the model dictionary src file (./model/dict_src/<model>.cpp and <model>.h)
2. customized main.cpp using the skeleton main event interface file (./model/main_src/main_<model>.cpp)

: Then, at top optimass directory, customize the Makefile, if your 'main.cpp' need to include or link other srcs for feeding/analyzing event data (Read below for using the 'ExRootAnalysis' which is a default option in skeleton file of main.cpp)
: using the Makefile 
$> make  (=> The first default quick-start run will show errors involved with ExRootAnalysis. See below.)
$> ./optimass.x


-----------------------------------------------------
# Customizing the Makefile for using ExRootAnalysis #
#  or 
# Removing dependence on ExRootAnaysis              #
-----------------------------------------------------

1. Using 'ExRootAnalysis'


1-1) Download and install the latest version of ExRootAnalysis from the MadGraph5 Download repository :
> http://madgraph.hep.uiuc.edu/
or
> http://madgraph.hep.uiuc.edu/Downloads/ExRootAnalysis/


1-2) Provide its correct paths (to headers and library) in the 'Makefile' of OPTIMASS by replacing the following <...> part :

[In the Makefile in your top OPTIMASS directory]
> ...
> EXROOT= <...>
> EXROOT_INC_FLAGS = -I$(EXROOT)/ExRootAnalysis
> EXROOT_LDFLAGS = -L$(EXROOT) -lExRootAnalysis
> ...
: The <...> should be replaced with the ExRootAnalysis installation directory of 1-1).


1-3) Then, compiliation of 'main.cpp' with the header files 'ExRootClasses.h' & 'ExRootTreeReader.h', linked with the $(EXROOT_LDFLAGS), can be processed.



2. Compiling 'main.cpp' with the dependendancy on 'ExRootAnalysis' REMOVED.


2-1) If you choose to use another event feeder and analyzer, then remove the following headers and related routines in your 'main.cpp'

[In your 'main.cpp']
> ...
> #include "ExRootClasses.h"
> #include "ExRootTreeReader.h"
>...


2-2) Delete any variables/links starting with 'EXROOT..' in the 'Makefile'.


